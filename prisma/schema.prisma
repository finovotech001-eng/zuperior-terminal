generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  clientId          String             @unique @default(cuid())
  email             String             @unique
  password          String
  name              String?
  phone             String?
  country           String?
  createdAt         DateTime           @default(now())
  emailVerified     Boolean            @default(false)
  lastLoginAt       DateTime?
  role              String             @default("user")
  status            String             @default("active")
  accounts          Account[]          @relation("accounts")
  activityLogs      ActivityLog[]      @relation("activityLogs")
  DefaultMT5Account DefaultMT5Account?
  deposits          Deposit[]          @relation("deposits")
  kyc               KYC?               @relation("kyc")
  mt5Accounts       MT5Account[]       @relation("mt5Accounts")
  RefreshToken      RefreshToken[]
  transactions      Transaction[]      @relation("transactions")
  UserFavorite      UserFavorite[]
  withdrawals       Withdrawal[]       @relation("withdrawals")
}

model KYC {
  id                  String    @id @default(uuid())
  isDocumentVerified  Boolean   @default(false)
  isAddressVerified   Boolean   @default(false)
  verificationStatus  String    @default("Pending")
  documentReference   String?
  addressReference    String?
  amlReference        String?
  documentSubmittedAt DateTime?
  addressSubmittedAt  DateTime?
  rejectionReason     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              String    @unique
  user                User      @relation("kyc", fields: [userId], references: [id])
}

model MT5Account {
  id                String              @id @default(uuid())
  accountId         String              @unique
  userId            String?
  accountType       String              @default("Live")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  password          String?
  leverage          Int?
  DefaultMT5Account DefaultMT5Account[]
  deposits          Deposit[]           @relation("deposits")
  user              User?               @relation("mt5Accounts", fields: [userId], references: [id])
  mt5Transactions   MT5Transaction[]    @relation("mt5Transactions")
  withdrawals       Withdrawal[]        @relation("withdrawals")
}

model MT5Transaction {
  id            String     @id @default(uuid()) @db.VarChar
  type          String     @db.VarChar
  amount        Float
  status        String?    @db.VarChar
  paymentMethod String?    @db.VarChar
  transactionId String?    @db.VarChar
  comment       String?    @db.VarChar
  mt5AccountId  String     @db.VarChar
  createdAt     DateTime?  @default(now()) @db.Timestamptz(6)
  currency      String?    @db.VarChar
  depositId     String?    @db.VarChar
  withdrawalId  String?    @db.VarChar
  userId        String?    @db.VarChar
  processedBy   String?    @db.VarChar
  processedAt   DateTime?  @db.Timestamptz(6)
  updatedAt     DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  mt5Account    MT5Account @relation("mt5Transactions", fields: [mt5AccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([depositId], map: "ix_MT5Transaction_depositId")
  @@index([mt5AccountId], map: "ix_MT5Transaction_mt5AccountId")
  @@index([status], map: "ix_MT5Transaction_status")
  @@index([type], map: "ix_MT5Transaction_type")
  @@index([userId], map: "ix_MT5Transaction_userId")
  @@index([withdrawalId], map: "ix_MT5Transaction_withdrawalId")
}

model Account {
  id          String   @id @default(uuid())
  userId      String
  accountType String
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("accounts", fields: [userId], references: [id])
}

model Transaction {
  id            String      @id @default(uuid())
  userId        String
  type          String
  amount        Float
  status        String      @default("pending")
  currency      String      @default("USD")
  paymentMethod String?
  transactionId String?
  description   String?
  metadata      String?
  depositId     String?
  withdrawalId  String?
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  deposit       Deposit?    @relation("transactions", fields: [depositId], references: [id])
  user          User        @relation("transactions", fields: [userId], references: [id])
  withdrawal    Withdrawal? @relation("transactions", fields: [withdrawalId], references: [id])

  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

model Deposit {
  id                    String        @id @default(uuid())
  userId                String
  mt5AccountId          String
  amount                Float
  currency              String        @default("USD")
  method                String
  paymentMethod         String?
  transactionHash       String?
  proofFileUrl          String?
  bankDetails           String?
  cryptoAddress         String?
  depositAddress        String?
  externalTransactionId String?
  status                String        @default("pending")
  rejectionReason       String?
  approvedBy            String?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  processedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  mt5Account            MT5Account    @relation("deposits", fields: [mt5AccountId], references: [id])
  user                  User          @relation("deposits", fields: [userId], references: [id])
  transactions          Transaction[] @relation("transactions")

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

model Withdrawal {
  id                    String        @id @default(uuid())
  userId                String
  mt5AccountId          String
  amount                Float
  method                String
  bankDetails           String?
  cryptoAddress         String?
  status                String        @default("pending")
  rejectionReason       String?
  approvedBy            String?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  currency              String        @default("USD")
  externalTransactionId String?
  paymentMethod         String?
  processedAt           DateTime?
  walletAddress         String?
  transactions          Transaction[] @relation("transactions")
  mt5Account            MT5Account    @relation("withdrawals", fields: [mt5AccountId], references: [id])
  user                  User          @relation("withdrawals", fields: [userId], references: [id])

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String?
  adminId   String
  action    String
  entity    String
  entityId  String?
  ipAddress String?
  userAgent String?
  oldValues String?
  newValues String?
  createdAt DateTime @default(now())
  admin     User     @relation("activityLogs", fields: [adminId], references: [id])
}

model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentMethod {
  id              String    @id @default(uuid())
  userId          String
  address         String
  currency        String    @default("USDT")
  network         String    @default("TRC20")
  status          String    @default("pending")
  submittedAt     DateTime  @default(now())
  approvedAt      DateTime?
  approvedBy      String?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
}

model DefaultMT5Account {
  id           String     @id
  userId       String     @unique
  mt5AccountId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  MT5Account   MT5Account @relation(fields: [mt5AccountId], references: [accountId])
  User         User       @relation(fields: [userId], references: [id])

  @@index([mt5AccountId])
}

model Instrument {
  id           String         @id
  symbol       String         @unique
  name         String?
  description  String?
  category     String
  group        String?
  digits       Int            @default(5)
  contractSize Float          @default(100000)
  minVolume    Float          @default(0.01)
  maxVolume    Float          @default(100)
  volumeStep   Float          @default(0.01)
  spread       Float          @default(0)
  isActive     Boolean        @default(true)
  tradingHours String?
  lastUpdated  DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  UserFavorite UserFavorite[]
}

model RefreshToken {
  id        String    @id @db.VarChar
  userId    String    @db.VarChar
  token     String    @unique(map: "ix_RefreshToken_token") @db.VarChar
  expiresAt DateTime  @db.Timestamptz(6)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  revoked   Boolean?
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt], map: "ix_RefreshToken_expiresAt")
  @@index([userId], map: "ix_RefreshToken_userId")
}

model UserFavorite {
  id           String     @id
  userId       String
  instrumentId String
  sortOrder    Int        @default(0)
  addedAt      DateTime   @default(now())
  Instrument   Instrument @relation(fields: [instrumentId], references: [id])
  User         User       @relation(fields: [userId], references: [id])

  @@unique([userId, instrumentId])
  @@index([instrumentId])
  @@index([userId])
}

model admin {
  id                        Int                         @id @default(autoincrement())
  username                  String                      @unique @db.VarChar(255)
  email                     String                      @unique @db.VarChar(255)
  password_hash             String                      @db.VarChar(255)
  admin_role                String?                     @default("admin") @db.VarChar(50)
  is_active                 Boolean?                    @default(true)
  last_login                DateTime?                   @db.Timestamptz(6)
  login_attempts            Int?                        @default(0)
  locked_until              DateTime?                   @db.Timestamptz(6)
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  admin_login_log           admin_login_log[]
  balance_operation_history balance_operation_history[]
}

model admin_login_log {
  id             Int      @id @default(autoincrement())
  admin_id       Int
  ip_address     String   @db.VarChar(45)
  user_agent     String?
  location       String?  @db.VarChar(255)
  device         String?  @db.VarChar(255)
  browser        String?  @db.VarChar(255)
  os             String?  @db.VarChar(255)
  success        Boolean  @default(true)
  failure_reason String?  @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  admin          admin    @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@index([admin_id])
  @@index([created_at])
}

model balance_operation_history {
  id             Int      @id @default(autoincrement())
  admin_id       Int
  mt5_login      String   @db.VarChar(50)
  operation_type String   @db.VarChar(50)
  amount         Float
  currency       String   @default("USD") @db.VarChar(10)
  description    String?
  status         String   @default("completed") @db.VarChar(20)
  error_message  String?
  ip_address     String?  @db.VarChar(45)
  user_agent     String?
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  admin          admin    @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@index([admin_id])
  @@index([created_at])
  @@index([mt5_login])
  @@index([operation_type])
}

model chat_conversations {
  id                 Int                 @id @default(autoincrement())
  user_id            String              @db.VarChar(255)
  user_name          String              @db.VarChar(255)
  user_email         String              @db.VarChar(255)
  admin_id           String?             @db.VarChar(255)
  status             String?             @default("open") @db.VarChar(20)
  priority           String?             @default("normal") @db.VarChar(20)
  subject            String?             @db.VarChar(500)
  last_message_at    DateTime?           @default(now()) @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?           @default(now()) @db.Timestamptz(6)
  closed_at          DateTime?           @db.Timestamptz(6)
  closed_by          String?             @db.VarChar(255)
  tags               String[]            @default([])
  unread_count_admin Int?                @default(0)
  unread_count_user  Int?                @default(0)
  chat_messages      chat_messages[]
  chat_participants  chat_participants[]
}

model chat_messages {
  id                 Int                 @id @default(autoincrement())
  conversation_id    Int?
  sender_id          String              @db.VarChar(255)
  sender_name        String              @db.VarChar(255)
  sender_type        String              @db.VarChar(20)
  message_type       String?             @default("text") @db.VarChar(20)
  content            String
  metadata           Json?               @default("{}")
  is_read            Boolean?            @default(false)
  read_at            DateTime?           @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?           @default(now()) @db.Timestamptz(6)
  chat_conversations chat_conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model chat_participants {
  id                 Int                 @id @default(autoincrement())
  conversation_id    Int?
  user_id            String              @db.VarChar(255)
  user_name          String              @db.VarChar(255)
  user_type          String              @db.VarChar(20)
  role               String?             @default("participant") @db.VarChar(20)
  joined_at          DateTime?           @default(now()) @db.Timestamptz(6)
  left_at            DateTime?           @db.Timestamptz(6)
  is_active          Boolean?            @default(true)
  chat_conversations chat_conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([conversation_id, user_id])
}

model group_commission_structures {
  id                      Int       @id @default(autoincrement())
  group_id                String    @db.VarChar(255)
  structure_name          String    @db.VarChar(100)
  usd_per_lot             Decimal   @default(0.00) @db.Decimal(10, 2)
  spread_share_percentage Decimal   @default(0.00) @db.Decimal(5, 2)
  is_active               Boolean   @default(true)
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([group_id, structure_name])
}

model ib_admin {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  password_hash  String    @db.VarChar(255)
  role           String?   @default("admin") @db.VarChar(50)
  is_active      Boolean?  @default(true)
  last_login     DateTime? @db.Timestamptz(6)
  login_attempts Int?      @default(0)
  locked_until   DateTime? @db.Timestamptz(6)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ib_requests {
  id                        Int                    @id @default(autoincrement())
  full_name                 String                 @db.VarChar(255)
  email                     String                 @unique @db.VarChar(255)
  password_hash             String                 @db.VarChar(255)
  status                    String                 @default("pending") @db.VarChar(50)
  ib_type                   String                 @default("common") @db.VarChar(50)
  submitted_at              DateTime?              @default(now()) @db.Timestamptz(6)
  approved_at               DateTime?              @db.Timestamptz(6)
  usd_per_lot               Decimal?               @db.Decimal(10, 2)
  spread_percentage_per_lot Decimal?               @db.Decimal(5, 2)
  admin_comments            String?
  group_id                  String?                @db.VarChar(255)
  structure_id              Int?
  created_at                DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?              @default(now()) @db.Timestamptz(6)
  ib_group_assignments      ib_group_assignments[]
}

model manual_gateway {
  id          Int      @id @default(autoincrement())
  type        String   @db.VarChar(50)
  name        String   @db.VarChar(255)
  details     String
  icon_url    String?  @db.VarChar(500)
  qr_code_url String?  @db.VarChar(500)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @db.Timestamptz(6)

  @@index([is_active])
  @@index([type])
}

model mt5_groups {
  id          Int       @id @default(autoincrement())
  group_id    String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String?
  synced_at   DateTime? @default(now()) @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model payment_gateway {
  id                     Int      @id @default(autoincrement())
  wallet_name            String   @db.VarChar(255)
  deposit_wallet_address String   @db.VarChar(255)
  api_key                String
  secret_key             String
  gateway_type           String   @db.VarChar(50)
  is_active              Boolean  @default(true)
  description            String?
  created_at             DateTime @default(now()) @db.Timestamptz(6)
  updated_at             DateTime @db.Timestamptz(6)

  @@index([gateway_type])
  @@index([is_active])
}

model symbols {
  id            Int       @id @default(autoincrement())
  symbol_name   String    @unique @db.VarChar(50)
  description   String?
  symbol_type   String?   @db.VarChar(20)
  group_name    String?   @db.VarChar(100)
  digits        Int?      @default(5)
  spread        Float?    @default(0)
  contract_size Int?      @default(100000)
  profit_mode   String?   @default("forex") @db.VarChar(20)
  enable        Boolean?  @default(true)
  swap_mode     String?   @default("disabled") @db.VarChar(20)
  swap_long     Float?    @default(0)
  swap_short    Float?    @default(0)
  swap3_day     String?   @default("wednesday") @db.VarChar(10)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
}

model ib_group_assignments {
  id                      Int          @id @default(autoincrement())
  ib_request_id           Int?
  group_id                String       @db.VarChar(255)
  group_name              String?      @db.VarChar(255)
  structure_id            Int?
  structure_name          String?      @db.VarChar(255)
  usd_per_lot             Decimal      @default(0) @db.Decimal(10, 2)
  spread_share_percentage Decimal      @default(0) @db.Decimal(5, 2)
  created_at              DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?    @default(now()) @db.Timestamptz(6)
  ib_requests             ib_requests? @relation(fields: [ib_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ib_trade_history {
  id            String    @id
  order_id      String    @unique
  account_id    String
  user_id       String?
  ib_request_id Int?
  symbol        String
  order_type    String
  volume_lots   Decimal   @db.Decimal
  open_price    Decimal?  @db.Decimal
  close_price   Decimal?  @db.Decimal
  profit        Decimal?  @db.Decimal
  ib_commission Decimal?  @default(0) @db.Decimal
  take_profit   Decimal?  @db.Decimal
  stop_loss     Decimal?  @db.Decimal
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  synced_at     DateTime? @default(now()) @db.Timestamp(6)
  group_id      String?

  @@index([account_id], map: "idx_ib_trade_account")
  @@index([group_id], map: "idx_ib_trade_group")
  @@index([ib_request_id], map: "idx_ib_trade_ib")
  @@index([symbol], map: "idx_ib_trade_symbol")
  @@index([user_id], map: "idx_ib_trade_user")
}

model support_tickets {
  id              Int       @id @default(autoincrement())
  ticket_no       String    @unique @db.VarChar(50)
  parent_id       String    @db.VarChar(255)
  title           String    @db.VarChar(500)
  description     String?   @db.Text
  ticket_type     String?   @db.VarChar(100)
  status          String    @default("New") @db.VarChar(50)
  priority        String    @default("normal") @db.VarChar(20)
  assigned_to     String?   @db.VarChar(255)
  account_number  String?   @db.VarChar(50)
  tags            String[]  @default([])
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  last_reply_at   DateTime?
  closed_at       DateTime?
  closed_by       String?   @db.VarChar(255)

  @@index([parent_id])
  @@index([status])
  @@index([ticket_no])
  @@index([created_at])
}

model support_ticket_replies {
  id          Int       @id @default(autoincrement())
  ticket_id   Int
  reply_id    Int?      // For nested replies
  sender_id   String    @db.VarChar(255)
  sender_name String    @db.VarChar(255)
  sender_type String    @db.VarChar(20) // user, admin, system
  content     String    @db.Text
  is_internal Boolean   @default(false) // Internal notes visible only to admins
  attachments String[]  @default([]) // Array of file URLs
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  is_read     Boolean   @default(false)

  @@index([ticket_id])
  @@index([reply_id])
  @@index([created_at])
}

model support_articles {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(500)
  slug            String    @unique @db.VarChar(500)
  content         String    @db.Text
  excerpt         String?   @db.VarChar(1000)
  category        String    @db.VarChar(100)
  tags            String[]
  views           Int       @default(0)
  helpful_count   Int       @default(0)
  not_helpful_count Int     @default(0)
  is_published    Boolean   @default(false)
  author_id       String    @db.VarChar(255)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  published_at    DateTime?

  @@index([slug])
  @@index([category])
  @@index([is_published])
  @@index([created_at])
}

model support_faq {
  id              Int       @id @default(autoincrement())
  question        String    @db.VarChar(500)
  answer          String    @db.Text
  category        String    @db.VarChar(100)
  tags            String[]
  helpful_count   Int       @default(0)
  not_helpful_count Int     @default(0)
  display_order   Int       @default(0)
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)

  @@index([category])
  @@index([is_active])
  @@index([display_order])
}

model support_categories {
  id              Int       @id @default(autoincrement())
  name            String    @unique @db.VarChar(100)
  slug            String    @unique @db.VarChar(100)
  description     String?   @db.VarChar(500)
  icon            String?   @db.VarChar(100)
  display_order   Int       @default(0)
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)

  @@index([slug])
  @@index([is_active])
}

model support_replies {
  id              Int       @id @default(autoincrement())
  ticket_id       Int
  sender_id       String    @db.VarChar(255)
  sender_name     String    @db.VarChar(255)
  sender_type     String    @db.VarChar(20)
  content         String    @db.Text
  is_internal     Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  
  @@index([ticket_id])
}
