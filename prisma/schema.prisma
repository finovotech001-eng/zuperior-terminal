generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  clientId            String               @unique @default(cuid())
  email               String               @unique
  password            String
  name                String?
  phone               String?
  country             String?
  createdAt           DateTime             @default(now())
  emailVerified       Boolean              @default(false)
  lastLoginAt         DateTime?
  role                String               @default("user")
  status              String               @default("active")
  accounts            Account[]            @relation("accounts")
  activityLogs        ActivityLog[]        @relation("activityLogs")
  deposits            Deposit[]            @relation("deposits")
  kyc                 KYC?                 @relation("kyc")
  mt5Accounts         MT5Account[]         @relation("mt5Accounts")
  passwordResetTokens PasswordResetToken[] @relation("passwordResetTokens")
  paymentMethods      PaymentMethod[]      @relation("paymentMethods")
  transactions        Transaction[]        @relation("transactions")
  favorites           UserFavorite[]
  withdrawals         Withdrawal[]         @relation("withdrawals")

  @@index([email])
  @@index([clientId])
  @@index([status])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([role, status])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("passwordResetTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model KYC {
  id                  String    @id @default(uuid())
  isDocumentVerified  Boolean   @default(false)
  isAddressVerified   Boolean   @default(false)
  verificationStatus  String    @default("Pending")
  documentReference   String?
  addressReference    String?
  amlReference        String?
  documentSubmittedAt DateTime?
  addressSubmittedAt  DateTime?
  rejectionReason     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              String    @unique
  user                User      @relation("kyc", fields: [userId], references: [id])
}

model MT5Account {
  id              String           @id @default(uuid())
  accountId       String           @unique
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deposits        Deposit[]        @relation("deposits")
  user            User             @relation("mt5Accounts", fields: [userId], references: [id])
  mt5Transactions MT5Transaction[] @relation("mt5Transactions")
  withdrawals     Withdrawal[]     @relation("withdrawals")
}

model MT5Transaction {
  id            String     @id @default(uuid())
  type          String
  amount        Float
  status        String     @default("pending")
  paymentMethod String?
  transactionId String?
  comment       String?
  mt5AccountId  String
  createdAt     DateTime   @default(now())
  currency      String     @default("USD")
  depositId     String?
  withdrawalId  String?
  userId        String?
  processedBy   String?
  processedAt   DateTime?
  updatedAt     DateTime   @updatedAt
  mt5Account    MT5Account @relation("mt5Transactions", fields: [mt5AccountId], references: [id])

  @@index([mt5AccountId])
  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

model Account {
  id          String   @id @default(uuid())
  userId      String
  accountType String
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("accounts", fields: [userId], references: [id])
}

model Transaction {
  id            String      @id @default(uuid())
  userId        String
  type          String
  amount        Float
  status        String      @default("pending")
  currency      String      @default("USD")
  paymentMethod String?
  transactionId String?
  description   String?
  metadata      String?
  depositId     String?
  withdrawalId  String?
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  deposit       Deposit?    @relation("transactions", fields: [depositId], references: [id])
  user          User        @relation("transactions", fields: [userId], references: [id])
  withdrawal    Withdrawal? @relation("transactions", fields: [withdrawalId], references: [id])

  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

model Deposit {
  id                    String        @id @default(uuid())
  userId                String
  mt5AccountId          String
  amount                Float
  currency              String        @default("USD")
  method                String
  paymentMethod         String?
  transactionHash       String?
  proofFileUrl          String?
  bankDetails           String?
  cryptoAddress         String?
  depositAddress        String?
  externalTransactionId String?
  status                String        @default("pending")
  rejectionReason       String?
  approvedBy            String?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  processedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  mt5Account            MT5Account    @relation("deposits", fields: [mt5AccountId], references: [id])
  user                  User          @relation("deposits", fields: [userId], references: [id])
  transactions          Transaction[] @relation("transactions")

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

model Withdrawal {
  id                    String        @id @default(uuid())
  userId                String
  mt5AccountId          String
  amount                Float
  method                String
  bankDetails           String?
  cryptoAddress         String?
  status                String        @default("pending")
  rejectionReason       String?
  approvedBy            String?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  currency              String        @default("USD")
  externalTransactionId String?
  paymentMethod         String?
  processedAt           DateTime?
  walletAddress         String?
  transactions          Transaction[] @relation("transactions")
  mt5Account            MT5Account    @relation("withdrawals", fields: [mt5AccountId], references: [id])
  user                  User          @relation("withdrawals", fields: [userId], references: [id])

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String?
  adminId   String
  action    String
  entity    String
  entityId  String?
  ipAddress String?
  userAgent String?
  oldValues String?
  newValues String?
  createdAt DateTime @default(now())
  admin     User     @relation("activityLogs", fields: [adminId], references: [id])
}

model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentMethod {
  id              String    @id @default(uuid())
  userId          String
  address         String
  currency        String    @default("USDT")
  network         String    @default("TRC20")
  status          String    @default("pending")
  submittedAt     DateTime?
  approvedAt      DateTime?
  approvedBy      String?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation("paymentMethods", fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
}

model Instrument {
  id            String         @id @default(uuid())
  symbol        String         @unique
  name          String?
  description   String?
  category      String
  group         String?
  digits        Int            @default(5)
  contractSize  Float          @default(100000)
  minVolume     Float          @default(0.01)
  maxVolume     Float          @default(100)
  volumeStep    Float          @default(0.01)
  spread        Float          @default(0)
  isActive      Boolean        @default(true)
  tradingHours  String?
  lastUpdated   DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  userFavorites UserFavorite[]

  @@index([symbol])
  @@index([category])
  @@index([isActive])
  @@index([category, isActive])
  @@index([group])
}

model UserFavorite {
  id           String     @id @default(uuid())
  userId       String
  instrumentId String
  sortOrder    Int        @default(0)
  addedAt      DateTime   @default(now())
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, instrumentId])
  @@index([userId])
  @@index([instrumentId])
  @@index([userId, sortOrder])
}

model chat_conversations {
  id                 Int                 @id @default(autoincrement())
  user_id            String              @db.VarChar(255)
  user_name          String              @db.VarChar(255)
  user_email         String              @db.VarChar(255)
  admin_id           String?             @db.VarChar(255)
  status             String?             @default("open") @db.VarChar(20)
  priority           String?             @default("normal") @db.VarChar(20)
  subject            String?             @db.VarChar(500)
  last_message_at    DateTime?           @default(now()) @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?           @default(now()) @db.Timestamptz(6)
  closed_at          DateTime?           @db.Timestamptz(6)
  closed_by          String?             @db.VarChar(255)
  tags               String[]            @default([])
  unread_count_admin Int?                @default(0)
  unread_count_user  Int?                @default(0)
  chat_messages      chat_messages[]
  chat_participants  chat_participants[]
}

model chat_messages {
  id                 Int                 @id @default(autoincrement())
  conversation_id    Int?
  sender_id          String              @db.VarChar(255)
  sender_name        String              @db.VarChar(255)
  sender_type        String              @db.VarChar(20)
  message_type       String?             @default("text") @db.VarChar(20)
  content            String
  metadata           Json?               @default("{}")
  is_read            Boolean?            @default(false)
  read_at            DateTime?           @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?           @default(now()) @db.Timestamptz(6)
  chat_conversations chat_conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model chat_participants {
  id                 Int                 @id @default(autoincrement())
  conversation_id    Int?
  user_id            String              @db.VarChar(255)
  user_name          String              @db.VarChar(255)
  user_type          String              @db.VarChar(20)
  role               String?             @default("participant") @db.VarChar(20)
  joined_at          DateTime?           @default(now()) @db.Timestamptz(6)
  left_at            DateTime?           @db.Timestamptz(6)
  is_active          Boolean?            @default(true)
  chat_conversations chat_conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([conversation_id, user_id])
}

model group_commission_structures {
  id                      Int       @id @default(autoincrement())
  group_id                String    @db.VarChar(255)
  structure_name          String    @db.VarChar(100)
  usd_per_lot             Decimal   @default(0.00) @db.Decimal(10, 2)
  spread_share_percentage Decimal   @default(0.00) @db.Decimal(5, 2)
  is_active               Boolean   @default(true)
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([group_id, structure_name])
}

model ib_admin {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  password_hash  String    @db.VarChar(255)
  role           String?   @default("admin") @db.VarChar(50)
  is_active      Boolean?  @default(true)
  last_login     DateTime? @db.Timestamptz(6)
  login_attempts Int?      @default(0)
  locked_until   DateTime? @db.Timestamptz(6)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ib_requests {
  id                        Int       @id @default(autoincrement())
  full_name                 String    @db.VarChar(255)
  email                     String    @unique @db.VarChar(255)
  password_hash             String    @db.VarChar(255)
  status                    String    @default("pending") @db.VarChar(50)
  ib_type                   String    @default("common") @db.VarChar(50)
  submitted_at              DateTime? @default(now()) @db.Timestamptz(6)
  approved_at               DateTime? @db.Timestamptz(6)
  usd_per_lot               Decimal?  @db.Decimal(10, 2)
  spread_percentage_per_lot Decimal?  @db.Decimal(5, 2)
  admin_comments            String?
  group_id                  String?   @db.VarChar(255)
  structure_id              Int?
  created_at                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                DateTime? @default(now()) @db.Timestamptz(6)
}

model mt5_groups {
  id          Int       @id @default(autoincrement())
  group_id    String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String?
  synced_at   DateTime? @default(now()) @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model symbols {
  id            Int       @id @default(autoincrement())
  symbol_name   String    @unique @db.VarChar(50)
  description   String?
  symbol_type   String?   @db.VarChar(20)
  group_name    String?   @db.VarChar(100)
  digits        Int?      @default(5)
  spread        Float?    @default(0)
  contract_size Int?      @default(100000)
  profit_mode   String?   @default("forex") @db.VarChar(20)
  enable        Boolean?  @default(true)
  swap_mode     String?   @default("disabled") @db.VarChar(20)
  swap_long     Float?    @default(0)
  swap_short    Float?    @default(0)
  swap3_day     String?   @default("wednesday") @db.VarChar(10)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
}
