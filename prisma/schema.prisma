// server/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(uuid())
  clientId      String        @unique @default(cuid())
  email         String        @unique
  password      String // Hashed password
  name          String?
  phone         String?
  country       String?
  role          String        @default("user") // "admin", "user", "moderator"
  status        String        @default("active") // "active", "banned", "suspended"
  emailVerified Boolean       @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime      @default(now())
  accounts      Account[]     @relation("accounts")
  transactions  Transaction[] @relation("transactions")
  kyc           KYC?          @relation("kyc")
  mt5Accounts   MT5Account[]  @relation("mt5Accounts")
  deposits      Deposit[]     @relation("deposits")
  withdrawals   Withdrawal[]  @relation("withdrawals")
  activityLogs  ActivityLog[] @relation("activityLogs")
  paymentMethods PaymentMethod[] @relation("paymentMethods")
  passwordResetTokens PasswordResetToken[] @relation("passwordResetTokens")
  favorites     UserFavorite[] // User's favorite instruments

  // Performance indexes
  @@index([email])
  @@index([clientId])
  @@index([status])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([role, status])
}

// Password Reset Token Model
model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("passwordResetTokens", fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique // Hashed token
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model KYC {
  id                  String    @id @default(uuid())
  isDocumentVerified  Boolean   @default(false)
  isAddressVerified   Boolean   @default(false)
  verificationStatus  String    @default("Pending")
  documentReference   String?
  addressReference    String?
  amlReference        String?
  documentSubmittedAt DateTime?
  addressSubmittedAt  DateTime?
  rejectionReason     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation("kyc", fields: [userId], references: [id])
  userId              String    @unique
}

model MT5Account {
  id        String   @id @default(uuid())
  accountId String   @unique // MT5 Account ID from API response
  userId    String // Link to User table
  user      User     @relation("mt5Accounts", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mt5Transactions MT5Transaction[] @relation("mt5Transactions")
  deposits        Deposit[]        @relation("deposits")
  withdrawals     Withdrawal[]     @relation("withdrawals")
}

model MT5Transaction {
  id            String     @id @default(uuid())
  type          String // "Deposit", "Withdrawal", "Internal Transfer In", "Internal Transfer Out"
  amount        Float
  currency      String     @default("USD")
  status        String     @default("pending") // "pending", "completed", "failed", "rejected"
  paymentMethod String? // "crypto", "card", "bank", "manual", "internal_transfer"
  transactionId String? // External payment gateway ID, transaction hash, or internal transfer ID
  comment       String?
  depositId     String? // Link to Deposit record
  withdrawalId  String? // Link to Withdrawal record
  userId        String? // User who made the transaction
  processedBy   String? // Admin who processed (approved/rejected)
  processedAt   DateTime? // When the transaction was processed
  mt5Account    MT5Account @relation("mt5Transactions", fields: [mt5AccountId], references: [id])
  mt5AccountId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([mt5AccountId])
  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

// Add the missing Account Model
model Account {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation("accounts", fields: [userId], references: [id])
  accountType String // e.g., 'trading', 'wallet'
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Comprehensive Transaction Model for all transaction types
model Transaction {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation("transactions", fields: [userId], references: [id])
  type          String // 'deposit', 'withdrawal', 'transfer'
  amount        Float
  currency      String      @default("USD")
  status        String      @default("pending") // "pending", "completed", "failed", "rejected"
  paymentMethod String?
  transactionId String?
  description   String?
  metadata      String? // JSON string for additional data
  depositId     String?
  deposit       Deposit?    @relation("transactions", fields: [depositId], references: [id])
  withdrawalId  String?
  withdrawal    Withdrawal? @relation("transactions", fields: [withdrawalId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

// Comprehensive Deposit Model
model Deposit {
  id                    String        @id @default(uuid())
  userId                String
  user                  User          @relation("deposits", fields: [userId], references: [id])
  mt5AccountId          String
  mt5Account            MT5Account    @relation("deposits", fields: [mt5AccountId], references: [id])
  amount                Float
  currency              String        @default("USD")
  method                String // "manual", "crypto", "card", "bank"
  paymentMethod         String?
  transactionHash       String? // User provided transaction hash
  proofFileUrl          String? // Uploaded proof file URL
  bankDetails           String? // JSON string for bank details
  cryptoAddress         String? // Crypto address for deposit
  depositAddress        String? // System deposit address
  externalTransactionId String? // External payment gateway transaction ID
  status                String        @default("pending") // "pending", "approved", "rejected", "failed"
  rejectionReason       String?
  approvedBy            String? // Admin user ID who approved
  approvedAt            DateTime?
  rejectedAt            DateTime?
  processedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  transactions          Transaction[] @relation("transactions")

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

// Comprehensive Withdrawal Model
model Withdrawal {
  id                    String        @id @default(uuid())
  userId                String
  user                  User          @relation("withdrawals", fields: [userId], references: [id])
  mt5AccountId          String // MT5 Account ID
  mt5Account            MT5Account    @relation("withdrawals", fields: [mt5AccountId], references: [id])
  amount                Float
  currency              String        @default("USD")
  method                String // "bank", "crypto", "card"
  paymentMethod         String?
  bankDetails           String? // JSON string for bank details
  cryptoAddress         String? // Crypto wallet address
  walletAddress         String? // Alternative wallet address field
  externalTransactionId String? // External payment gateway transaction ID
  status                String        @default("pending") // "pending", "approved", "rejected", "failed"
  rejectionReason       String?
  approvedBy            String? // Admin user ID who approved
  approvedAt            DateTime?
  rejectedAt            DateTime?
  processedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  transactions          Transaction[] @relation("transactions")

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

// Activity Log Model for admin actions
model ActivityLog {
  id        String   @id @default(uuid())
  userId    String? // User affected by the action
  adminId   String // Admin who performed the action
  admin     User     @relation("activityLogs", fields: [adminId], references: [id])
  action    String // "create", "update", "delete", "approve", "reject"
  entity    String // "user", "deposit", "withdrawal", "kyc"
  entityId  String? // ID of the affected entity
  ipAddress String? // IP address of admin
  userAgent String? // User agent of admin
  oldValues String? // JSON string of old values
  newValues String? // JSON string of new values
  createdAt DateTime @default(now())
}

// System Settings Model for admin configurations
model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique // Setting key
  value       String // JSON string value
  category    String // "smtp", "payment", "limits", "general"
  description String? // Description of the setting
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Role Model for user roles and permissions
model Role {
  id          String   @id @default(uuid())
  name        String   @unique // Role name
  permissions String // JSON array of permissions
  description String? // Role description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Payment Method Model for user wallet addresses
model PaymentMethod {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation("paymentMethods", fields: [userId], references: [id])
  address         String // Wallet address
  currency        String   @default("USDT")
  network         String   @default("TRC20")
  status          String   @default("pending") // "pending", "approved", "rejected"
  submittedAt     DateTime? // When payment method was submitted
  approvedAt      DateTime?
  approvedBy      String? // Admin user ID who approved
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

// User Role Model for many-to-many relationship
model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // Admin who assigned the role
}

// Instruments Model - Cache of all trading instruments
model Instrument {
  id                String             @id @default(uuid())
  symbol            String             @unique // e.g., "EUR/USD", "BTCUSD"
  name              String?            // Full name if available
  description       String?            // Description from API
  category          String             // forex, crypto, stocks, indices, commodities
  group             String?            // Group/Category from MT5 API
  digits            Int                @default(5) // Decimal places
  contractSize      Float              @default(100000) // Standard lot size
  minVolume         Float              @default(0.01) // Minimum trade volume
  maxVolume         Float              @default(100) // Maximum trade volume
  volumeStep        Float              @default(0.01) // Volume step
  spread            Float              @default(0) // Current spread
  isActive          Boolean            @default(true) // Trading enabled/disabled
  tradingHours      String?            // Trading hours if available
  lastUpdated       DateTime           @updatedAt
  createdAt         DateTime           @default(now())
  
  // Relationships
  userFavorites     UserFavorite[]
  
  // Performance indexes
  @@index([symbol])
  @@index([category])
  @@index([isActive])
  @@index([category, isActive])
  @@index([group])
}

// User Favorites Model - User's favorite instruments
model UserFavorite {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  instrumentId      String
  instrument        Instrument  @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  sortOrder         Int         @default(0) // Custom sort order for user
  addedAt           DateTime    @default(now())
  
  // Ensure user can only favorite an instrument once
  @@unique([userId, instrumentId])
  @@index([userId])
  @@index([instrumentId])
  @@index([userId, sortOrder])
}

